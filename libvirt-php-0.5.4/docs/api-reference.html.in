<?xml version="1.0"?>
<html>
  <body>
<h1>PHP API Reference guide</h1>

    <h3>Functions</h3>

    <!-- Links -->
<pre>Total number of functions: 182. Functions supported are:<br /><br />
	<code class="docref">libvirt_get_last_error</code>()<br />
	<code class="docref">libvirt_connect</code>($url, $readonly, $credentials)<br />
	<code class="docref">libvirt_node_get_info</code>($conn)<br />
	<code class="docref">libvirt_node_get_cpu_stats</code>($conn, $cpunr)<br />
	<code class="docref">libvirt_node_get_cpu_stats_for_each_cpu</code>($conn, $time)<br />
	<code class="docref">libvirt_node_get_mem_stats</code>($conn)<br />
	<code class="docref">libvirt_node_get_free_memory</code>($conn)<br />
	<code class="docref">libvirt_connect_get_machine_types</code>($conn)<br />
	<code class="docref">libvirt_connect_get_information</code>($conn)<br />
	<code class="docref">libvirt_connect_get_uri</code>($conn)<br />
	<code class="docref">libvirt_connect_get_hostname</code>($conn)<br />
	<code class="docref">libvirt_image_create</code>($conn, $name, $size, $format)<br />
	<code class="docref">libvirt_image_remove</code>($conn, $image)<br />
	<code class="docref">libvirt_connect_get_hypervisor</code>($conn)<br />
	<code class="docref">libvirt_connect_is_encrypted</code>($conn)<br />
	<code class="docref">libvirt_connect_is_secure</code>($conn)<br />
	<code class="docref">libvirt_connect_get_all_domain_stats</code>($conn, $stats, $flags)<br />
	<code class="docref">libvirt_connect_get_maxvcpus</code>($conn)<br />
	<code class="docref">libvirt_connect_get_sysinfo</code>($conn)<br />
	<code class="docref">libvirt_domain_get_counts</code>($conn)<br />
	<code class="docref">libvirt_domain_is_persistent</code>($res)<br />
	<code class="docref">libvirt_domain_set_max_memory</code>($res, $memory)<br />
	<code class="docref">libvirt_domain_set_memory</code>($res, $memory)<br />
	<code class="docref">libvirt_domain_set_memory_flags</code>($res, $memory, $flags)<br />
	<code class="docref">libvirt_domain_get_autostart</code>($res)<br />
	<code class="docref">libvirt_domain_set_autostart</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_get_metadata</code>($res, $type, $uri, $flags)<br />
	<code class="docref">libvirt_domain_set_metadata</code>($res, $type, $metadata, $key, $uri, $flags)<br />
	<code class="docref">libvirt_domain_is_active</code>($res)<br />
	<code class="docref">libvirt_domain_lookup_by_name</code>($res, $name)<br />
	<code class="docref">libvirt_domain_lookup_by_uuid</code>($res, $uuid)<br />
	<code class="docref">libvirt_domain_qemu_agent_command</code>($res, $cmd, $timeout, $flags)<br />
	<code class="docref">libvirt_domain_lookup_by_uuid_string</code>($res, $uuid)<br />
	<code class="docref">libvirt_stream_create</code>($res)<br />
	<code class="docref">libvirt_stream_close</code>($res)<br />
	<code class="docref">libvirt_stream_abort</code>($res)<br />
	<code class="docref">libvirt_stream_finish</code>($res)<br />
	<code class="docref">libvirt_stream_recv</code>($res, $data, $len)<br />
	<code class="docref">libvirt_stream_send</code>($res, $data, $length)<br />
	<code class="docref">libvirt_domain_lookup_by_id</code>($conn, $id)<br />
	<code class="docref">libvirt_domain_get_name</code>($res)<br />
	<code class="docref">libvirt_domain_get_uuid_string</code>($res)<br />
	<code class="docref">libvirt_domain_get_screenshot_api</code>($res, $screenID)<br />
	<code class="docref">libvirt_domain_get_screenshot</code>($res, $server, $scancode)<br />
	<code class="docref">libvirt_domain_get_screen_dimensions</code>($res, $server)<br />
	<code class="docref">libvirt_domain_send_keys</code>($res, $server, $scancode)<br />
	<code class="docref">libvirt_domain_send_key_api</code>($res[resource], $codeset, $holdtime, $keycodes, $flags)<br />
	<code class="docref">libvirt_domain_send_pointer_event</code>($res, $server, $pos_x, $pos_y, $clicked, $release)<br />
	<code class="docref">libvirt_domain_get_uuid</code>($res)<br />
	<code class="docref">libvirt_domain_get_id</code>($res)<br />
	<code class="docref">libvirt_domain_get_next_dev_ids</code>($res)<br />
	<code class="docref">libvirt_connect_get_capabilities</code>($conn, $xpath)<br />
	<code class="docref">libvirt_connect_get_emulator</code>($conn, $arch)<br />
	<code class="docref">libvirt_connect_get_nic_models</code>($conn, $arch)<br />
	<code class="docref">libvirt_connect_get_soundhw_models</code>($conn, $arch, $flags)<br />
	<code class="docref">libvirt_domain_new</code>($conn, $name, $arch, $memMB, $maxmemMB, $vcpus, $iso_image, $disks, $networks, $flags)<br />
	<code class="docref">libvirt_domain_new_get_vnc</code>()<br />
	<code class="docref">libvirt_domain_get_xml_desc</code>($res, $xpath)<br />
	<code class="docref">libvirt_domain_get_disk_devices</code>($res)<br />
	<code class="docref">libvirt_domain_get_interface_devices</code>($res)<br />
	<code class="docref">libvirt_domain_change_vcpus</code>($res, $numCpus, $flags)<br />
	<code class="docref">libvirt_domain_change_memory</code>($res, $allocMem, $allocMax, $flags)<br />
	<code class="docref">libvirt_domain_change_boot_devices</code>($res, $first, $second, $flags)<br />
	<code class="docref">libvirt_domain_disk_add</code>($res, $img, $dev, $typ, $driver, $flags)<br />
	<code class="docref">libvirt_domain_disk_remove</code>($res, $dev, $flags)<br />
	<code class="docref">libvirt_domain_nic_add</code>($res, $mac, $network, $model, $flags)<br />
	<code class="docref">libvirt_domain_nic_remove</code>($res, $dev, $flags)<br />
	<code class="docref">libvirt_domain_attach_device</code>($res, $xml, $flags)<br />
	<code class="docref">libvirt_domain_detach_device</code>($res, $xml, $flags)<br />
	<code class="docref">libvirt_domain_get_info</code>($res)<br />
	<code class="docref">libvirt_domain_create</code>($res)<br />
	<code class="docref">libvirt_domain_destroy</code>($res)<br />
	<code class="docref">libvirt_domain_resume</code>($res)<br />
	<code class="docref">libvirt_domain_core_dump</code>($res, $to)<br />
	<code class="docref">libvirt_domain_shutdown</code>($res)<br />
	<code class="docref">libvirt_domain_managedsave</code>($res)<br />
	<code class="docref">libvirt_domain_suspend</code>($res)<br />
	<code class="docref">libvirt_domain_undefine</code>($res)<br />
	<code class="docref">libvirt_domain_reboot</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_define_xml</code>($conn, $xml)<br />
	<code class="docref">libvirt_domain_create_xml</code>($conn, $xml)<br />
	<code class="docref">libvirt_domain_xml_from_native</code>($conn, $format, $config_data)<br />
	<code class="docref">libvirt_domain_xml_to_native</code>($conn, $format, $xml_data, $*/, $PHP_FUNCTION(libvirt_domain_xml_to_native), ${, $php_libvirt_connection, $zval, $char, $char, $char, $strsize_t, $strsize_t, $unsigned, $, $GET_CONNECTION_FROM_ARGS("rss",, $, $config_data, $, $if, $set_error_if_unset("Cannot, $RETURN_FALSE;, $}, $, $VIRT_RETVAL_STRING(config_data);, $free(config_data);, $}, $)<br />
	<code class="docref">libvirt_domain_memory_peek</code>($res, $start, $size, $flags)<br />
	<code class="docref">libvirt_domain_memory_stats</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_update_device</code>($res, $xml, $flags)<br />
	<code class="docref">libvirt_domain_block_stats</code>($res, $path)<br />
	<code class="docref">libvirt_domain_block_resize</code>($res, $path, $size, $flags)<br />
	<code class="docref">libvirt_domain_block_commit</code>($res, $disk, $base, $top, $bandwidth, $flags)<br />
	<code class="docref">libvirt_domain_block_job_abort</code>($res, $path, $flags)<br />
	<code class="docref">libvirt_domain_block_job_set_speed</code>($res, $path, $bandwidth, $flags)<br />
	<code class="docref">libvirt_domain_get_network_info</code>($res, $mac)<br />
	<code class="docref">libvirt_domain_get_block_info</code>($res, $dev)<br />
	<code class="docref">libvirt_domain_xml_xpath</code>($res, $xpath, $flags)<br />
	<code class="docref">libvirt_domain_interface_stats</code>($res, $path)<br />
	<code class="docref">libvirt_domain_get_connect</code>($res)<br />
	<code class="docref">libvirt_domain_migrate_to_uri</code>($res, $dest_uri, $flags, $dname, $bandwidth)<br />
	<code class="docref">libvirt_domain_migrate_to_uri2</code>($res, $dconnuri, $miguri, $dxml, $flags, $dname, $bandwidth)<br />
	<code class="docref">libvirt_domain_migrate</code>($res, $dest_conn, $flags, $dname, $bandwidth)<br />
	<code class="docref">libvirt_domain_get_job_info</code>($res)<br />
	<code class="docref">libvirt_domain_has_current_snapshot</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_snapshot_lookup_by_name</code>($res, $name, $flags)<br />
	<code class="docref">libvirt_domain_snapshot_create</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_snapshot_get_xml</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_snapshot_revert</code>($res, $flags)<br />
	<code class="docref">libvirt_domain_snapshot_delete</code>($res, $flags)<br />
	<code class="docref">libvirt_list_domain_snapshots</code>($res, $flags)<br />
	<code class="docref">libvirt_storagepool_lookup_by_name</code>($res, $name)<br />
	<code class="docref">libvirt_storagepool_lookup_by_volume</code>($res)<br />
	<code class="docref">libvirt_storagepool_list_volumes</code>($res)<br />
	<code class="docref">libvirt_storagepool_get_info</code>($res)<br />
	<code class="docref">libvirt_storagevolume_lookup_by_name</code>($res, $name)<br />
	<code class="docref">libvirt_storagevolume_lookup_by_path</code>($res, $path)<br />
	<code class="docref">libvirt_storagevolume_get_name</code>($res)<br />
	<code class="docref">libvirt_storagevolume_get_path</code>($res)<br />
	<code class="docref">libvirt_storagevolume_get_info</code>($res)<br />
	<code class="docref">libvirt_storagevolume_get_xml_desc</code>($res, $xpath, $flags)<br />
	<code class="docref">libvirt_storagevolume_create_xml</code>($res, $xml, $flags)<br />
	<code class="docref">libvirt_storagevolume_create_xml_from</code>($pool, $xml, $original_volume)<br />
	<code class="docref">libvirt_storagevolume_delete</code>($res, $flags)<br />
	<code class="docref">libvirt_storagevolume_resize</code>($res, $capacity, $flags)<br />
	<code class="docref">libvirt_storagevolume_download</code>($res, $stream, $offset, $length, $flags)<br />
	<code class="docref">libvirt_storagevolume_upload</code>($res, $stream, $offset, $length, $flags)<br />
	<code class="docref">libvirt_storagepool_get_uuid_string</code>($res)<br />
	<code class="docref">libvirt_storagepool_get_name</code>($res)<br />
	<code class="docref">libvirt_storagepool_lookup_by_uuid_string</code>($res, $uuid)<br />
	<code class="docref">libvirt_storagepool_get_xml_desc</code>($res, $xpath)<br />
	<code class="docref">libvirt_storagepool_define_xml</code>($res, $xml, $flags)<br />
	<code class="docref">libvirt_storagepool_undefine</code>($res)<br />
	<code class="docref">libvirt_storagepool_create</code>($res)<br />
	<code class="docref">libvirt_storagepool_destroy</code>($res)<br />
	<code class="docref">libvirt_storagepool_is_active</code>($res)<br />
	<code class="docref">libvirt_storagepool_get_volume_count</code>($res)<br />
	<code class="docref">libvirt_storagepool_refresh</code>($res, $flags)<br />
	<code class="docref">libvirt_storagepool_set_autostart</code>($res, $flags)<br />
	<code class="docref">libvirt_storagepool_get_autostart</code>($res)<br />
	<code class="docref">libvirt_storagepool_build</code>($res)<br />
	<code class="docref">libvirt_storagepool_delete</code>($res)<br />
	<code class="docref">libvirt_list_storagepools</code>($res)<br />
	<code class="docref">libvirt_list_active_storagepools</code>($res)<br />
	<code class="docref">libvirt_list_inactive_storagepools</code>($res)<br />
	<code class="docref">libvirt_list_domains</code>($res)<br />
	<code class="docref">libvirt_list_domain_resources</code>($res)<br />
	<code class="docref">libvirt_list_active_domain_ids</code>($res)<br />
	<code class="docref">libvirt_list_active_domains</code>($res)<br />
	<code class="docref">libvirt_list_inactive_domains</code>($res)<br />
	<code class="docref">libvirt_list_all_networks</code>($res, $flags)<br />
	<code class="docref">libvirt_list_networks</code>($res, $flags)<br />
	<code class="docref">libvirt_list_nodedevs</code>($res, $cap)<br />
	<code class="docref">libvirt_list_all_nwfilters</code>($res)<br />
	<code class="docref">libvirt_list_nwfilters</code>($res)<br />
	<code class="docref">libvirt_nodedev_get</code>($res, $name)<br />
	<code class="docref">libvirt_nodedev_capabilities</code>($res)<br />
	<code class="docref">libvirt_nodedev_get_xml_desc</code>($res, $xpath)<br />
	<code class="docref">libvirt_nodedev_get_information</code>($res)<br />
	<code class="docref">libvirt_network_define_xml</code>($res, $xml)<br />
	<code class="docref">libvirt_network_undefine</code>($res)<br />
	<code class="docref">libvirt_network_get</code>($res, $name)<br />
	<code class="docref">libvirt_network_get_bridge</code>($res)<br />
	<code class="docref">libvirt_network_get_active</code>($res)<br />
	<code class="docref">libvirt_network_get_information</code>($res)<br />
	<code class="docref">libvirt_network_set_active</code>($res, $flags)<br />
	<code class="docref">libvirt_network_get_xml_desc</code>($res, $xpath)<br />
	<code class="docref">libvirt_network_get_uuid_string</code>($res)<br />
	<code class="docref">libvirt_network_get_uuid</code>($res)<br />
	<code class="docref">libvirt_network_get_name</code>($res)<br />
	<code class="docref">libvirt_network_get_autostart</code>($res)<br />
	<code class="docref">libvirt_network_set_autostart</code>($res, $flags)<br />
	<code class="docref">libvirt_nwfilter_define_xml</code>($res, $xml)<br />
	<code class="docref">libvirt_nwfilter_undefine</code>($res)<br />
	<code class="docref">libvirt_nwfilter_get_xml_desc</code>($res, $xpath)<br />
	<code class="docref">libvirt_nwfilter_get_uuid_string</code>($res)<br />
	<code class="docref">libvirt_nwfilter_get_uuid</code>($res)<br />
	<code class="docref">libvirt_nwfilter_get_name</code>($res)<br />
	<code class="docref">libvirt_nwfilter_lookup_by_name</code>($res, $name)<br />
	<code class="docref">libvirt_nwfilter_lookup_by_uuid_string</code>($res, $uuid)<br />
	<code class="docref">libvirt_nwfilter_lookup_by_uuid</code>($res, $uuid)<br />
	<code class="docref">libvirt_version</code>($type)<br />
	<code class="docref">libvirt_check_version</code>($major, $minor, $micro, $type)<br />
	<code class="docref">libvirt_has_feature</code>($name)<br />
	<code class="docref">libvirt_get_iso_images</code>($path)<br />
	<code class="docref">libvirt_print_binding_resources</code>()<br />
	<code class="docref">libvirt_logfile_set</code>($filename, $maxsize)<br />
</pre>
<h3><a name="libvirt_get_last_error"><code>libvirt_get_last_error</code></a></h3>
<pre class="programlisting">libvirt_get_last_error()</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>This function is used to get the last error coming either from libvirt or the PHP extension itself.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         last error string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect"><code>libvirt_connect</code></a></h3>
<pre class="programlisting">libvirt_connect($url, $readonly, $credentials)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>libvirt_connect() is used to connect to the specified libvirt daemon using the specified URL, user can also set the readonly flag and/or set credentials for connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@url [string]</tt></i>:</span>
		    </td>
		    <td>
			 URI for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@readonly [bool]</tt></i>:</span>
		    </td>
		    <td>
			 flag whether to use read-only connection or not
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@credentials [array]</tt></i>:</span>
		    </td>
		    <td>
			 array of connection credentials
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt connection resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_node_get_info"><code>libvirt_node_get_info</code></a></h3>
<pre class="programlisting">libvirt_node_get_info($conn)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the information about host node, mainly total memory installed, total CPUs installed and model information are useful.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of node information or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_node_get_cpu_stats"><code>libvirt_node_get_cpu_stats</code></a></h3>
<pre class="programlisting">libvirt_node_get_cpu_stats($conn, $cpunr)</pre>
<p>[Since version 0.4.6]</p>
<p>Function is used to get the CPU stats per nodes.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@cpunr [int]</tt></i>:</span>
		    </td>
		    <td>
			 CPU number to get information about, defaults to VIR_NODE_CPU_STATS_ALL_CPUS to get information about all CPUs
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of node CPU statistics including time (in seconds since UNIX epoch), cpu number and total number of CPUs on node or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_node_get_cpu_stats_for_each_cpu"><code>libvirt_node_get_cpu_stats_for_each_cpu</code></a></h3>
<pre class="programlisting">libvirt_node_get_cpu_stats_for_each_cpu($conn, $time)</pre>
<p>[Since version 0.4.6]</p>
<p>Function is used to get the CPU stats for each CPU on the host node.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@time [int]</tt></i>:</span>
		    </td>
		    <td>
			 time in seconds to get the information about, without aggregation for further processing
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of node CPU statistics for each CPU including time (in seconds since UNIX epoch), cpu number and total number of CPUs on node or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_node_get_mem_stats"><code>libvirt_node_get_mem_stats</code></a></h3>
<pre class="programlisting">libvirt_node_get_mem_stats($conn)</pre>
<p>[Since version 0.4.6]</p>
<p>Function is used to get the memory stats per node.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of node memory statistics including time (in seconds since UNIX epoch) or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_node_get_free_memory"><code>libvirt_node_get_free_memory</code></a></h3>
<pre class="programlisting">libvirt_node_get_free_memory($conn)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to get free memory available on the node..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection.
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         The available free memery in bytes as string or FALSE for error.
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_machine_types"><code>libvirt_connect_get_machine_types</code></a></h3>
<pre class="programlisting">libvirt_connect_get_machine_types($conn)</pre>
<p>[Since version 0.4.9]</p>
<p>Function is used to get machine types supported by hypervisor on the conneciton.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of machine types for the connection incl. maxCpus if appropriate
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_information"><code>libvirt_connect_get_information</code></a></h3>
<pre class="programlisting">libvirt_connect_get_information($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the information about the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of information about the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_uri"><code>libvirt_connect_get_uri</code></a></h3>
<pre class="programlisting">libvirt_connect_get_uri($conn)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the connection URI. This is useful to check the hypervisor type of host machine when using "null" uri to libvirt_connect().</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         connection URI string or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_hostname"><code>libvirt_connect_get_hostname</code></a></h3>
<pre class="programlisting">libvirt_connect_get_hostname($conn)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the hostname of the guest associated with the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         hostname of the host node or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_image_create"><code>libvirt_image_create</code></a></h3>
<pre class="programlisting">libvirt_image_create($conn, $name, $size, $format)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to create the image of desired name, size and format. The image will be created in the image path (libvirt.image_path INI variable). Works only o.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the image file that will be created in the libvirt.image_path directory
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@size [int]</tt></i>:</span>
		    </td>
		    <td>
			 size of the image in MiBs
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@format [string]</tt></i>:</span>
		    </td>
		    <td>
			 format of the image, may be raw, qcow or qcow2
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         hostname of the host node or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_image_remove"><code>libvirt_image_remove</code></a></h3>
<pre class="programlisting">libvirt_image_remove($conn, $image)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to create the image of desired name, size and format. The image will be created in the image path (libvirt.image_path INI variable). Works only on local systems!.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@image [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the image file that should be deleted
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         hostname of the host node or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_hypervisor"><code>libvirt_connect_get_hypervisor</code></a></h3>
<pre class="programlisting">libvirt_connect_get_hypervisor($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the information about the hypervisor on the connection identified by the connection pointer.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of hypervisor information if available
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_is_encrypted"><code>libvirt_connect_is_encrypted</code></a></h3>
<pre class="programlisting">libvirt_connect_is_encrypted($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the information whether the connection is encrypted or not.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         1 if encrypted, 0 if not encrypted, -1 on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_is_secure"><code>libvirt_connect_is_secure</code></a></h3>
<pre class="programlisting">libvirt_connect_is_secure($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the information whether the connection is secure or not.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         1 if secure, 0 if not secure, -1 on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_all_domain_stats"><code>libvirt_connect_get_all_domain_stats</code></a></h3>
<pre class="programlisting">libvirt_connect_get_all_domain_stats($conn, $stats, $flags)</pre>
<p>[Since version 0.5.1(-1)]</p>
<p>Query statistics for all domains on a given connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@stats [int]</tt></i>:</span>
		    </td>
		    <td>
			 the statistic groups from VIR_DOMAIN_STATS_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 the filter flags from VIR_CONNECT_GET_ALL_DOMAINS_STATS_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         assoc array with statistics or false on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_maxvcpus"><code>libvirt_connect_get_maxvcpus</code></a></h3>
<pre class="programlisting">libvirt_connect_get_maxvcpus($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get maximum number of VCPUs per VM on the hypervisor connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         number of VCPUs available per VM on the connection or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_sysinfo"><code>libvirt_connect_get_sysinfo</code></a></h3>
<pre class="programlisting">libvirt_connect_get_sysinfo($conn)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the system information from connection if available.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         XML description of system information from the connection or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_counts"><code>libvirt_domain_get_counts</code></a></h3>
<pre class="programlisting">libvirt_domain_get_counts($conn)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is getting domain counts for all, active and inactive domains.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of total, active and inactive (but defined) domain counts
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_is_persistent"><code>libvirt_domain_is_persistent</code></a></h3>
<pre class="programlisting">libvirt_domain_is_persistent($res)</pre>
<p>[Since version 0.4.9]</p>
<p>Function to get information whether domain is persistent or not.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for persistent, FALSE for not persistent, -1 on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_set_max_memory"><code>libvirt_domain_set_max_memory</code></a></h3>
<pre class="programlisting">libvirt_domain_set_max_memory($res, $memory)</pre>
<p>[Since version 0.5.1]</p>
<p>Function to set max memory for domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@memory [int]</tt></i>:</span>
		    </td>
		    <td>
			 memory size in 1024 bytes (Kb)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE for failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_set_memory"><code>libvirt_domain_set_memory</code></a></h3>
<pre class="programlisting">libvirt_domain_set_memory($res, $memory)</pre>
<p>[Since version 0.5.1]</p>
<p>Function to set memory for domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@memory [int]</tt></i>:</span>
		    </td>
		    <td>
			 memory size in 1024 bytes (Kb)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE for failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_set_memory_flags"><code>libvirt_domain_set_memory_flags</code></a></h3>
<pre class="programlisting">libvirt_domain_set_memory_flags($res, $memory, $flags)</pre>
<p>[Since version 0.5.1]</p>
<p>Function to set max memory for domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@memory [int]</tt></i>:</span>
		    </td>
		    <td>
			 memory size in 1024 bytes (Kb)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR VIR_DOMAIN_MEM_* flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE for failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_autostart"><code>libvirt_domain_get_autostart</code></a></h3>
<pre class="programlisting">libvirt_domain_get_autostart($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is getting the autostart value for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         autostart value or -1
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_set_autostart"><code>libvirt_domain_set_autostart</code></a></h3>
<pre class="programlisting">libvirt_domain_set_autostart($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is setting the autostart value for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flag to enable/disable autostart
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_metadata"><code>libvirt_domain_get_metadata</code></a></h3>
<pre class="programlisting">libvirt_domain_get_metadata($res, $type, $uri, $flags)</pre>
<p>[Since version 0.4.9]</p>
<p>Function retrieve appropriate domain element given by @type..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@type [int]</tt></i>:</span>
		    </td>
		    <td>
			 virDomainMetadataType type of description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uri [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML namespace identifier
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of virDomainModificationImpact
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         metadata string, NULL on error or FALSE on API not supported
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_set_metadata"><code>libvirt_domain_set_metadata</code></a></h3>
<pre class="programlisting">libvirt_domain_set_metadata($res, $type, $metadata, $key, $uri, $flags)</pre>
<p>[Since version 0.4.9]</p>
<p>Function sets the appropriate domain element given by @type to the value of @description. No new lines are permitted..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@type [int]</tt></i>:</span>
		    </td>
		    <td>
			 virDomainMetadataType type of description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@metadata [string]</tt></i>:</span>
		    </td>
		    <td>
			 new metadata text
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@key [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML namespace key or empty string (alias of NULL)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uri [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML namespace identifier or empty string (alias of NULL)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of virDomainModificationImpact
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         -1 on error, 0 on success
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_is_active"><code>libvirt_domain_is_active</code></a></h3>
<pre class="programlisting">libvirt_domain_is_active($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is getting information whether domain identified by resource is active or not.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         virDomainIsActive() result on the domain
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_lookup_by_name"><code>libvirt_domain_lookup_by_name</code></a></h3>
<pre class="programlisting">libvirt_domain_lookup_by_name($res, $name)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for domain by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain name to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_lookup_by_uuid"><code>libvirt_domain_lookup_by_uuid</code></a></h3>
<pre class="programlisting">libvirt_domain_lookup_by_uuid($res, $uuid)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for domain by it's UUID in the binary format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uuid [string]</tt></i>:</span>
		    </td>
		    <td>
			 binary defined UUID to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_qemu_agent_command"><code>libvirt_domain_qemu_agent_command</code></a></h3>
<pre class="programlisting">libvirt_domain_qemu_agent_command($res, $cmd, $timeout, $flags)</pre>
<p>[Since version 0.5.2(-1)]</p>
<p>Function is used to send qemu-ga command.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@cmd [string]</tt></i>:</span>
		    </td>
		    <td>
			 command
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@timeout</tt></i>:</span>
		    </td>
		    <td>
			@timeout
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 unknown
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:        String on success and FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_lookup_by_uuid_string"><code>libvirt_domain_lookup_by_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_domain_lookup_by_uuid_string($res, $uuid)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain by it's UUID that's accepted in string format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uuid [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain UUID [in string format] to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_create"><code>libvirt_stream_create</code></a></h3>
<pre class="programlisting">libvirt_stream_create($res)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to create new stream from libvirt conn.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         resource libvirt stream resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_close"><code>libvirt_stream_close</code></a></h3>
<pre class="programlisting">libvirt_stream_close($res)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to close stream.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt stream resource from libvirt_stream_create()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_abort"><code>libvirt_stream_abort</code></a></h3>
<pre class="programlisting">libvirt_stream_abort($res)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to abort transfer.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt stream resource from libvirt_stream_create()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_finish"><code>libvirt_stream_finish</code></a></h3>
<pre class="programlisting">libvirt_stream_finish($res)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to finish transfer.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt stream resource from libvirt_stream_create()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_recv"><code>libvirt_stream_recv</code></a></h3>
<pre class="programlisting">libvirt_stream_recv($res, $data, $len)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to recv from stream via libvirt conn.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt stream resource from libvirt_stream_create()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@data [string]</tt></i>:</span>
		    </td>
		    <td>
			 buffer
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@len [int]</tt></i>:</span>
		    </td>
		    <td>
			 amout of data to recieve
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_stream_send"><code>libvirt_stream_send</code></a></h3>
<pre class="programlisting">libvirt_stream_send($res, $data, $length)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to send to stream via libvirt conn.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt stream resource from libvirt_stream_create()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@data [string]</tt></i>:</span>
		    </td>
		    <td>
			 buffer
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@length [int]</tt></i>:</span>
		    </td>
		    <td>
			 amout of data to send
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_lookup_by_id"><code>libvirt_domain_lookup_by_id</code></a></h3>
<pre class="programlisting">libvirt_domain_lookup_by_id($conn, $id)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get domain by it's ID, applicable only to running guests.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@id   [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain id to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_name"><code>libvirt_domain_get_name</code></a></h3>
<pre class="programlisting">libvirt_domain_get_name($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get domain name from it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain name string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_uuid_string"><code>libvirt_domain_get_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_domain_get_uuid_string($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's UUID in string format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain UUID string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_screenshot_api"><code>libvirt_domain_get_screenshot_api</code></a></h3>
<pre class="programlisting">libvirt_domain_get_screenshot_api($res, $screenID)</pre>
<p>[Since version 0.4.5]</p>
<p>Function is trying to get domain screenshot using libvirt virGetDomainScreenshot() API if available..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_get_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@screenID [int]</tt></i>:</span>
		    </td>
		    <td>
			 monitor ID from where to take screenshot
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of filename and mime type as type is hypervisor specific, caller is responsible for temporary file deletion
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_screenshot"><code>libvirt_domain_get_screenshot</code></a></h3>
<pre class="programlisting">libvirt_domain_get_screenshot($res, $server, $scancode)</pre>
<p>[Since version 0.4.2]</p>
<p>Function uses gvnccapture (if available) to get the screenshot of the running domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@server [string]</tt></i>:</span>
		    </td>
		    <td>
			 server string for the host machine
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@scancode [int]</tt></i>:</span>
		    </td>
		    <td>
			 integer value of the scancode to be send to refresh screen
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         PNG image binary data
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_screen_dimensions"><code>libvirt_domain_get_screen_dimensions</code></a></h3>
<pre class="programlisting">libvirt_domain_get_screen_dimensions($res, $server)</pre>
<p>[Since version 0.4.3]</p>
<p>Function get screen dimensions of the VNC window.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@server [string]</tt></i>:</span>
		    </td>
		    <td>
			 server string of the host machine
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of height and width on success, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_send_keys"><code>libvirt_domain_send_keys</code></a></h3>
<pre class="programlisting">libvirt_domain_send_keys($res, $server, $scancode)</pre>
<p>[Since version 0.4.2]</p>
<p>Function sends keys to the domain's VNC window.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@server [string]</tt></i>:</span>
		    </td>
		    <td>
			 server string of the host machine
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@scancode [int]</tt></i>:</span>
		    </td>
		    <td>
			 integer scancode to be sent to VNC window
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_send_key_api"><code>libvirt_domain_send_key_api</code></a></h3>
<pre class="programlisting">libvirt_domain_send_key_api($res[resource], $codeset, $holdtime, $keycodes, $flags)</pre>
<p>[Since version 0.5.3]</p>
<p>Function sends keys to domain via libvirt API.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res[resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domaing_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@codeset [int]</tt></i>:</span>
		    </td>
		    <td>
			 the codeset of keycodes, from virKeycodeSet
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@holdtime [int]</tt></i>:</span>
		    </td>
		    <td>
			 the duration (in miliseconds) that the keys will be held
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@keycodes [array]</tt></i>:</span>
		    </td>
		    <td>
			 array of keycodes
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 extra flags; not used yet so callers should alway pass 0
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE for failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_send_pointer_event"><code>libvirt_domain_send_pointer_event</code></a></h3>
<pre class="programlisting">libvirt_domain_send_pointer_event($res, $server, $pos_x, $pos_y, $clicked, $release)</pre>
<p>[Since version 0.4.2]</p>
<p>Function sends keys to the domain's VNC window.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@server [string]</tt></i>:</span>
		    </td>
		    <td>
			 server string of the host machine
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@pos_x [int]</tt></i>:</span>
		    </td>
		    <td>
			 position on x-axis
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@pos_y [int]</tt></i>:</span>
		    </td>
		    <td>
			 position on y-axis
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@clicked [int]</tt></i>:</span>
		    </td>
		    <td>
			 mask of clicked buttons (0 for none, bit 1 for button #1, bit 8 for button #8)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@release [int]</tt></i>:</span>
		    </td>
		    <td>
			 boolean value (0 or 1) whether to release the buttons automatically once pressed
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_uuid"><code>libvirt_domain_get_uuid</code></a></h3>
<pre class="programlisting">libvirt_domain_get_uuid($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's UUID in binary format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain UUID in binary format
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_id"><code>libvirt_domain_get_id</code></a></h3>
<pre class="programlisting">libvirt_domain_get_id($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's ID, applicable to running guests only.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         running domain ID or -1 if not running
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_next_dev_ids"><code>libvirt_domain_get_next_dev_ids</code></a></h3>
<pre class="programlisting">libvirt_domain_get_next_dev_ids($res)</pre>
<p>[Since version 0.4.2]</p>
<p>This functions can be used to get the next free slot if you intend to add a new device identified by slot to the domain, e.g. NIC device.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         next free slot number for the domain
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_capabilities"><code>libvirt_connect_get_capabilities</code></a></h3>
<pre class="programlisting">libvirt_connect_get_capabilities($conn, $xpath)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the capabilities information from the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 resource for connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath query to be applied on the result
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         capabilities XML from the connection or FALSE for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_emulator"><code>libvirt_connect_get_emulator</code></a></h3>
<pre class="programlisting">libvirt_connect_get_emulator($conn, $arch)</pre>
<p>[Since version 0.4.5]</p>
<p>Function is used to get the emulator for requested connection/architecture.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@arch [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional architecture string, can be NULL to get default
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         path to the emulator
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_nic_models"><code>libvirt_connect_get_nic_models</code></a></h3>
<pre class="programlisting">libvirt_connect_get_nic_models($conn, $arch)</pre>
<p>[Since version 0.4.9]</p>
<p>Function is used to get NIC models for requested connection/architecture.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@arch [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional architecture string, can be NULL to get default
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of models
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_connect_get_soundhw_models"><code>libvirt_connect_get_soundhw_models</code></a></h3>
<pre class="programlisting">libvirt_connect_get_soundhw_models($conn, $arch, $flags)</pre>
<p>[Since version 0.4.9]</p>
<p>Function is used to get sound hardware models for requested connection/architecture.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@arch [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional architecture string, can be NULL to get default
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags for getting sound hardware. Can be either 0 or VIR_CONNECT_SOUNDHW_GET_NAMES
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         array of models
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_new"><code>libvirt_domain_new</code></a></h3>
<pre class="programlisting">libvirt_domain_new($conn, $name, $arch, $memMB, $maxmemMB, $vcpus, $iso_image, $disks, $networks, $flags)</pre>
<p>[Since version 0.4.5]</p>
<p>Function is used to install a new virtual machine to the machine.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the new domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@arch [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional architecture string, can be NULL to get default (or false)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@memMB [int]</tt></i>:</span>
		    </td>
		    <td>
			 number of megabytes of RAM to be allocated for domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@maxmemMB [int]</tt></i>:</span>
		    </td>
		    <td>
			 maximum number of megabytes of RAM to be allocated for domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@vcpus [int]</tt></i>:</span>
		    </td>
		    <td>
			 number of VCPUs to be allocated to domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@iso_image [string]</tt></i>:</span>
		    </td>
		    <td>
			 installation ISO image for domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@disks [array]</tt></i>:</span>
		    </td>
		    <td>
			 array of disk devices for domain, consist of keys as 'path' (storage location), 'driver' (image type, e.g. 'raw' or 'qcow2'), 'bus' (e.g. 'ide', 'scsi'), 'dev' (device to be presented to the guest - e.g. 'hda'), 'size' (with 'M' or 'G' suffixes, like '10G' for 10 gigabytes image etc.) and 'flags' (VIR_DOMAIN_DISK_FILE or VIR_DOMAIN_DISK_BLOCK, optionally VIR_DOMAIN_DISK_ACCESS_ALL to allow access to the disk for all users on the host system)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@networks [array]</tt></i>:</span>
		    </td>
		    <td>
			 array of network devices for domain, consists of keys as 'mac' (for MAC address), 'network' (for network name) and optional 'model' for model of NIC device
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bit array of flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:     a new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_new_get_vnc"><code>libvirt_domain_new_get_vnc</code></a></h3>
<pre class="programlisting">libvirt_domain_new_get_vnc()</pre>
<p>[Since version 0.4.5]</p>
<p>Function is used to get the VNC server location for the newly created domain (newly started installation).</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         a VNC server for a newly created domain resource (if any)
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_xml_desc"><code>libvirt_domain_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_domain_get_xml_desc($res, $xpath)</pre>
<p>[Since version 0.4.1(-1), changed 0.4.2]</p>
<p>Function is used to get the domain's XML description.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain XML description string or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_disk_devices"><code>libvirt_domain_get_disk_devices</code></a></h3>
<pre class="programlisting">libvirt_domain_get_disk_devices($res)</pre>
<p>[Since version 0.4.4]</p>
<p>Function is used to get disk devices for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         list of domain disk devices
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_interface_devices"><code>libvirt_domain_get_interface_devices</code></a></h3>
<pre class="programlisting">libvirt_domain_get_interface_devices($res)</pre>
<p>[Since version 0.4.4]</p>
<p>Function is used to get network interface devices for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         list of domain interface devices
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_change_vcpus"><code>libvirt_domain_change_vcpus</code></a></h3>
<pre class="programlisting">libvirt_domain_change_vcpus($res, $numCpus, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to change the VCPU count for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@numCpus [int]</tt></i>:</span>
		    </td>
		    <td>
			 number of VCPUs to be set for the guest
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags for virDomainSetVcpusFlags (available at http://libvirt.org/html/libvirt-libvirt.html#virDomainVcpuFlags)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         true on success, false on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_change_memory"><code>libvirt_domain_change_memory</code></a></h3>
<pre class="programlisting">libvirt_domain_change_memory($res, $allocMem, $allocMax, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to change the domain memory allocation.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@allocMem [int]</tt></i>:</span>
		    </td>
		    <td>
			 number of MiBs to be set as immediate memory value
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@allocMax [int]</tt></i>:</span>
		    </td>
		    <td>
			 number of MiBs to be set as the maximum allocation
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_change_boot_devices"><code>libvirt_domain_change_boot_devices</code></a></h3>
<pre class="programlisting">libvirt_domain_change_boot_devices($res, $first, $second, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to change the domain boot devices.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@first [string]</tt></i>:</span>
		    </td>
		    <td>
			 first boot device to be set
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@second [string]</tt></i>:</span>
		    </td>
		    <td>
			 second boot device to be set
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_disk_add"><code>libvirt_domain_disk_add</code></a></h3>
<pre class="programlisting">libvirt_domain_disk_add($res, $img, $dev, $typ, $driver, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to add the disk to the virtual machine using set of API functions to make it as simple as possible for the user.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@img [string]</tt></i>:</span>
		    </td>
		    <td>
			 string for the image file on the host system
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dev [string]</tt></i>:</span>
		    </td>
		    <td>
			 string for the device to be presented to the guest (e.g. hda)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@typ [string]</tt></i>:</span>
		    </td>
		    <td>
			 bus type for the device in the guest, usually 'ide' or 'scsi'
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@driver [string]</tt></i>:</span>
		    </td>
		    <td>
			 driver type to be specified, like 'raw' or 'qcow2'
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags for getting the XML description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_disk_remove"><code>libvirt_domain_disk_remove</code></a></h3>
<pre class="programlisting">libvirt_domain_disk_remove($res, $dev, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to remove the disk from the virtual machine using set of API functions to make it as simple as possible.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dev [string]</tt></i>:</span>
		    </td>
		    <td>
			 string for the device to be removed from the guest (e.g. 'hdb')
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags for getting the XML description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_nic_add"><code>libvirt_domain_nic_add</code></a></h3>
<pre class="programlisting">libvirt_domain_nic_add($res, $mac, $network, $model, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to add the NIC card to the virtual machine using set of API functions to make it as simple as possible for the user.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@mac [string]</tt></i>:</span>
		    </td>
		    <td>
			 MAC string interpretation to be used for the NIC device
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@network [string]</tt></i>:</span>
		    </td>
		    <td>
			 network name where to connect this NIC
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@model [string]</tt></i>:</span>
		    </td>
		    <td>
			 string of the NIC model
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags for getting the XML description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_nic_remove"><code>libvirt_domain_nic_remove</code></a></h3>
<pre class="programlisting">libvirt_domain_nic_remove($res, $dev, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to remove the NIC from the virtual machine using set of API functions to make it as simple as possible.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dev [string]</tt></i>:</span>
		    </td>
		    <td>
			 string representation of the IP address to be removed (e.g. 54:52:00:xx:yy:zz)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags for getting the XML description
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         new domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_attach_device"><code>libvirt_domain_attach_device</code></a></h3>
<pre class="programlisting">libvirt_domain_attach_device($res, $xml, $flags)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to attach a virtual device to a domain..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML description of one device.
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags to control how the device is attached. Defaults to VIR_DOMAIN_AFFECT_LIVE
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error.
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_detach_device"><code>libvirt_domain_detach_device</code></a></h3>
<pre class="programlisting">libvirt_domain_detach_device($res, $xml, $flags)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to detach a virtual device from a domain..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML description of one device.
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags to control how the device is attached. Defaults to VIR_DOMAIN_AFFECT_LIVE
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error.
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_info"><code>libvirt_domain_get_info</code></a></h3>
<pre class="programlisting">libvirt_domain_get_info($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain information array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_create"><code>libvirt_domain_create</code></a></h3>
<pre class="programlisting">libvirt_domain_create($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to create the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result of domain creation (startup)
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_destroy"><code>libvirt_domain_destroy</code></a></h3>
<pre class="programlisting">libvirt_domain_destroy($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to destroy the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result of domain destroy
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_resume"><code>libvirt_domain_resume</code></a></h3>
<pre class="programlisting">libvirt_domain_resume($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to resume the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result of domain resume
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_core_dump"><code>libvirt_domain_core_dump</code></a></h3>
<pre class="programlisting">libvirt_domain_core_dump($res, $to)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to dump core of the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@to [string]</tt></i>:</span>
		    </td>
		    <td>
			 to
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_shutdown"><code>libvirt_domain_shutdown</code></a></h3>
<pre class="programlisting">libvirt_domain_shutdown($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to shutdown the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_managedsave"><code>libvirt_domain_managedsave</code></a></h3>
<pre class="programlisting">libvirt_domain_managedsave($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to managed save the domain (domain was unloaded from memory and it state saved to disk) identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_suspend"><code>libvirt_domain_suspend</code></a></h3>
<pre class="programlisting">libvirt_domain_suspend($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to suspend the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_undefine"><code>libvirt_domain_undefine</code></a></h3>
<pre class="programlisting">libvirt_domain_undefine($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to undefine the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_reboot"><code>libvirt_domain_reboot</code></a></h3>
<pre class="programlisting">libvirt_domain_reboot($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to reboot the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_define_xml"><code>libvirt_domain_define_xml</code></a></h3>
<pre class="programlisting">libvirt_domain_define_xml($conn, $xml)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to define the domain from XML string.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string to define guest from
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         newly defined domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_create_xml"><code>libvirt_domain_create_xml</code></a></h3>
<pre class="programlisting">libvirt_domain_create_xml($conn, $xml)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to create the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string to create guest from
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         newly started/created domain resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_xml_from_native"><code>libvirt_domain_xml_from_native</code></a></h3>
<pre class="programlisting">libvirt_domain_xml_from_native($conn, $format, $config_data)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to convert native configuration data to libvirt domain XML.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@format [string]</tt></i>:</span>
		    </td>
		    <td>
			 configuration format converting from
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@config_data [string]</tt></i>:</span>
		    </td>
		    <td>
			 content of the native config file
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain XML, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_xml_to_native"><code>libvirt_domain_xml_to_native</code></a></h3>
<pre class="programlisting">libvirt_domain_xml_to_native($conn, $format, $xml_data, $*/, $PHP_FUNCTION(libvirt_domain_xml_to_native), ${, $php_libvirt_connection, $zval, $char, $char, $char, $strsize_t, $strsize_t, $unsigned, $, $GET_CONNECTION_FROM_ARGS("rss",, $, $config_data, $, $if, $set_error_if_unset("Cannot, $RETURN_FALSE;, $}, $, $VIRT_RETVAL_STRING(config_data);, $free(config_data);, $}, $)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to convert libvirt domain XML to native configuration.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@conn [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@format [string]</tt></i>:</span>
		    </td>
		    <td>
			 configuration format converting to
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml_data [string]</tt></i>:</span>
		    </td>
		    <td>
			 content of the libvirt domain xml file
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>*/</tt></i>:</span>
		    </td>
		    <td>
			*/
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>PHP_FUNCTION(libvirt_domain_xml_to_native)</tt></i>:</span>
		    </td>
		    <td>
			PHP_FUNCTION(libvirt_domain_xml_to_native)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>{</tt></i>:</span>
		    </td>
		    <td>
			{
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>php_libvirt_connection</tt></i>:</span>
		    </td>
		    <td>
			php_libvirt_connection
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>zval</tt></i>:</span>
		    </td>
		    <td>
			zval
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>char</tt></i>:</span>
		    </td>
		    <td>
			char
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>char</tt></i>:</span>
		    </td>
		    <td>
			char
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>char</tt></i>:</span>
		    </td>
		    <td>
			char
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>strsize_t</tt></i>:</span>
		    </td>
		    <td>
			strsize_t
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>strsize_t</tt></i>:</span>
		    </td>
		    <td>
			strsize_t
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>unsigned</tt></i>:</span>
		    </td>
		    <td>
			unsigned
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt></tt></i>:</span>
		    </td>
		    <td>
			
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>GET_CONNECTION_FROM_ARGS("rss",</tt></i>:</span>
		    </td>
		    <td>
			GET_CONNECTION_FROM_ARGS("rss",
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt></tt></i>:</span>
		    </td>
		    <td>
			
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>config_data</tt></i>:</span>
		    </td>
		    <td>
			config_data
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt></tt></i>:</span>
		    </td>
		    <td>
			
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>if</tt></i>:</span>
		    </td>
		    <td>
			if
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>set_error_if_unset("Cannot</tt></i>:</span>
		    </td>
		    <td>
			set_error_if_unset("Cannot
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>RETURN_FALSE;</tt></i>:</span>
		    </td>
		    <td>
			RETURN_FALSE;
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>}</tt></i>:</span>
		    </td>
		    <td>
			}
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt></tt></i>:</span>
		    </td>
		    <td>
			
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>VIRT_RETVAL_STRING(config_data);</tt></i>:</span>
		    </td>
		    <td>
			VIRT_RETVAL_STRING(config_data);
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>free(config_data);</tt></i>:</span>
		    </td>
		    <td>
			free(config_data);
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>}</tt></i>:</span>
		    </td>
		    <td>
			}
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt></tt></i>:</span>
		    </td>
		    <td>
			
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         contents of the native data file, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_memory_peek"><code>libvirt_domain_memory_peek</code></a></h3>
<pre class="programlisting">libvirt_domain_memory_peek($res, $start, $size, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's memory peek value.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@start [int]</tt></i>:</span>
		    </td>
		    <td>
			 start
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@size [int]</tt></i>:</span>
		    </td>
		    <td>
			 size
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain memory peek
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_memory_stats"><code>libvirt_domain_memory_stats</code></a></h3>
<pre class="programlisting">libvirt_domain_memory_stats($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's memory stats.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain memory stats array (same fields as virDomainMemoryStats, please see libvirt documentation)
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_update_device"><code>libvirt_domain_update_device</code></a></h3>
<pre class="programlisting">libvirt_domain_update_device($res, $xml, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to update the domain's devices from the XML string.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string for the update
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 Flags to update the device (VIR_DOMAIN_DEVICE_MODIFY_CURRENT, VIR_DOMAIN_DEVICE_MODIFY_LIVE, VIR_DOMAIN_DEVICE_MODIFY_CONFIG, VIR_DOMAIN_DEVICE_MODIFY_FORCE)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_block_stats"><code>libvirt_domain_block_stats</code></a></h3>
<pre class="programlisting">libvirt_domain_block_stats($res, $path)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's block stats.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 device path to get statistics about
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain block stats array, fields are rd_req, rd_bytes, wr_req, wr_bytes and errs
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_block_resize"><code>libvirt_domain_block_resize</code></a></h3>
<pre class="programlisting">libvirt_domain_block_resize($res, $path, $size, $flags)</pre>
<p>[Since version 0.5.1(-1)]</p>
<p>Function is used to resize the domain's block device.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 device path to resize
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@size [int]</tt></i>:</span>
		    </td>
		    <td>
			 size of device
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of VIR_DOMAIN_BLOCK_RESIZE_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         true on success fail on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_block_commit"><code>libvirt_domain_block_commit</code></a></h3>
<pre class="programlisting">libvirt_domain_block_commit($res, $disk, $base, $top, $bandwidth, $flags)</pre>
<p>[Since version 0.5.2(-1)]</p>
<p>Function is used to commit block job.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@disk [string]</tt></i>:</span>
		    </td>
		    <td>
			 path to the block device, or device shorthand
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@base [string]</tt></i>:</span>
		    </td>
		    <td>
			 path to backing file to merge into, or device shorthand, or NULL for default
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@top [string]</tt></i>:</span>
		    </td>
		    <td>
			 path to file within backing chain that contains data to be merged, or device shorthand, or NULL to merge all possible data
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@bandwidth [int]</tt></i>:</span>
		    </td>
		    <td>
			 (optional) specify bandwidth limit; flags determine the unit
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of VIR_DOMAIN_BLOCK_COMMIT_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         true on success fail on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_block_job_abort"><code>libvirt_domain_block_job_abort</code></a></h3>
<pre class="programlisting">libvirt_domain_block_job_abort($res, $path, $flags)</pre>
<p>[Since version 0.5.1(-1)]</p>
<p>Function is used to abort block job.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 device path to resize
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of VIR_DOMAIN_BLOCK_JOB_ABORT_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         true on success fail on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_block_job_set_speed"><code>libvirt_domain_block_job_set_speed</code></a></h3>
<pre class="programlisting">libvirt_domain_block_job_set_speed($res, $path, $bandwidth, $flags)</pre>
<p>[Since version 0.5.1(-1)]</p>
<p>Function is used to set speed of block job.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 device path to resize
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@bandwidth [int]</tt></i>:</span>
		    </td>
		    <td>
			 bandwidth
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 bitwise-OR of VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_*
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         true on success fail on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_network_info"><code>libvirt_domain_get_network_info</code></a></h3>
<pre class="programlisting">libvirt_domain_get_network_info($res, $mac)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's network information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@mac [string]</tt></i>:</span>
		    </td>
		    <td>
			 mac address of the network device
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain network info array of MAC address, network name and type of NIC card
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_block_info"><code>libvirt_domain_get_block_info</code></a></h3>
<pre class="programlisting">libvirt_domain_get_block_info($res, $dev)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's block device information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dev [string]</tt></i>:</span>
		    </td>
		    <td>
			 device to get block information about
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain block device information array of device, file or partition, capacity, allocation and physical size
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_xml_xpath"><code>libvirt_domain_xml_xpath</code></a></h3>
<pre class="programlisting">libvirt_domain_xml_xpath($res, $xpath, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the result of xPath expression that's run against the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 xPath expression to parse against the domain
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result of the expression in an array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_interface_stats"><code>libvirt_domain_interface_stats</code></a></h3>
<pre class="programlisting">libvirt_domain_interface_stats($res, $path)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's interface stats.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 path to interface device
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         interface stats array of {tx|rx}_{bytes|packets|errs|drop} fields
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_connect"><code>libvirt_domain_get_connect</code></a></h3>
<pre class="programlisting">libvirt_domain_get_connect($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the domain's connection resource. This function should *not* be used!.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt connection resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_migrate_to_uri"><code>libvirt_domain_migrate_to_uri</code></a></h3>
<pre class="programlisting">libvirt_domain_migrate_to_uri($res, $dest_uri, $flags, $dname, $bandwidth)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used migrate domain to another libvirt daemon specified by it's URI.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dest_uri [string]</tt></i>:</span>
		    </td>
		    <td>
			 destination URI to migrate to
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dname [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain name to rename domain to on destination side
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@bandwidth [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration bandwidth in Mbps
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_migrate_to_uri2"><code>libvirt_domain_migrate_to_uri2</code></a></h3>
<pre class="programlisting">libvirt_domain_migrate_to_uri2($res, $dconnuri, $miguri, $dxml, $flags, $dname, $bandwidth)</pre>
<p>[Since version 0.4.6(-1)]</p>
<p>Function is used migrate domain to another libvirt daemon specified by it's URI.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dconnuri [string]</tt></i>:</span>
		    </td>
		    <td>
			 URI for target libvirtd
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@miguri [string]</tt></i>:</span>
		    </td>
		    <td>
			 URI for invoking the migration
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dxml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML config for launching guest on target
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dname [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain name to rename domain to on destination side
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@bandwidth [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration bandwidth in Mbps
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_migrate"><code>libvirt_domain_migrate</code></a></h3>
<pre class="programlisting">libvirt_domain_migrate($res, $dest_conn, $flags, $dname, $bandwidth)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used migrate domain to another domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dest_conn [string]</tt></i>:</span>
		    </td>
		    <td>
			 destination host connection object
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@dname [string]</tt></i>:</span>
		    </td>
		    <td>
			 domain name to rename domain to on destination side
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@bandwidth [int]</tt></i>:</span>
		    </td>
		    <td>
			 migration bandwidth in Mbps
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resource for migrated domain
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_get_job_info"><code>libvirt_domain_get_job_info</code></a></h3>
<pre class="programlisting">libvirt_domain_get_job_info($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used get job information for the domain.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource, e.g. from libvirt_domain_lookup_by_*()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         job information array of type, time, data, mem and file fields
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_has_current_snapshot"><code>libvirt_domain_has_current_snapshot</code></a></h3>
<pre class="programlisting">libvirt_domain_has_current_snapshot($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the information whether domain has the current snapshot.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE is domain has the current snapshot, otherwise FALSE (you may need to check for error using libvirt_get_last_error())
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_snapshot_lookup_by_name"><code>libvirt_domain_snapshot_lookup_by_name</code></a></h3>
<pre class="programlisting">libvirt_domain_snapshot_lookup_by_name($res, $name, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>This functions is used to lookup for the snapshot by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the snapshot to get the resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain snapshot resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_snapshot_create"><code>libvirt_domain_snapshot_create</code></a></h3>
<pre class="programlisting">libvirt_domain_snapshot_create($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>This function creates the domain snapshot for the domain identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         domain snapshot resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_snapshot_get_xml"><code>libvirt_domain_snapshot_get_xml</code></a></h3>
<pre class="programlisting">libvirt_domain_snapshot_get_xml($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the XML description of the snapshot identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         XML description string for the snapshot
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_snapshot_revert"><code>libvirt_domain_snapshot_revert</code></a></h3>
<pre class="programlisting">libvirt_domain_snapshot_revert($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to revert the domain state to the state identified by the snapshot.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_domain_snapshot_delete"><code>libvirt_domain_snapshot_delete</code></a></h3>
<pre class="programlisting">libvirt_domain_snapshot_delete($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to revert the domain state to the state identified by the snapshot.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 0 to delete just snapshot, VIR_SNAPSHOT_DELETE_CHILDREN to delete snapshot children as well
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_domain_snapshots"><code>libvirt_list_domain_snapshots</code></a></h3>
<pre class="programlisting">libvirt_list_domain_snapshots($res, $flags)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to list domain snapshots for the domain specified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt domain resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt snapshot flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain snapshot names array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_lookup_by_name"><code>libvirt_storagepool_lookup_by_name</code></a></h3>
<pre class="programlisting">libvirt_storagepool_lookup_by_name($res, $name)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for storage pool by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 storage pool name
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_lookup_by_volume"><code>libvirt_storagepool_lookup_by_volume</code></a></h3>
<pre class="programlisting">libvirt_storagepool_lookup_by_volume($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for storage pool by a volume.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [volume]</tt></i>:</span>
		    </td>
		    <td>
			 volume resource of storage pool
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_list_volumes"><code>libvirt_storagepool_list_volumes</code></a></h3>
<pre class="programlisting">libvirt_storagepool_list_volumes($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list volumes in the specified storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         list of storage volume names in the storage pool in an array using default keys (indexes)
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_info"><code>libvirt_storagepool_get_info</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_info($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get information about the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storage pool information array of state, capacity, allocation and available space
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_lookup_by_name"><code>libvirt_storagevolume_lookup_by_name</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_lookup_by_name($res, $name)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for storage volume by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the storage volume to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagevolume resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_lookup_by_path"><code>libvirt_storagevolume_lookup_by_path</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_lookup_by_path($res, $path)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to lookup for storage volume by it's path.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 path of the storage volume to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagevolume resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_get_name"><code>libvirt_storagevolume_get_name</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_get_name($res)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the storage volume name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagevolume name
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_get_path"><code>libvirt_storagevolume_get_path</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_get_path($res)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to get the  storage volume path.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagevolume path
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_get_info"><code>libvirt_storagevolume_get_info</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_get_info($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the storage volume information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storage volume information array of type, allocation and capacity
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_get_xml_desc"><code>libvirt_storagevolume_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_get_xml_desc($res, $xpath, $flags)</pre>
<p>[Since version 0.4.1(-1), changed 0.4.2]</p>
<p>Function is used to get the storage volume XML description.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagevolume XML description or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_create_xml"><code>libvirt_storagevolume_create_xml</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_create_xml($res, $xml, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to create the new storage pool and return the handle to new storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string to create the storage volume in the storage pool
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 virStorageVolCreateXML flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagevolume resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_create_xml_from"><code>libvirt_storagevolume_create_xml_from</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_create_xml_from($pool, $xml, $original_volume)</pre>
<p>[Since version 0.4.1(-2)]</p>
<p>Function is used to clone the new storage volume into pool from the orignial volume.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@pool [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string to create the storage volume in the storage pool
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@original_volume [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagevolume resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_delete"><code>libvirt_storagevolume_delete</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_delete($res, $flags)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to delete to volume identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags for the storage volume deletion for virStorageVolDelete()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_resize"><code>libvirt_storagevolume_resize</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_resize($res, $capacity, $flags)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to resize volume identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@capacity [int]</tt></i>:</span>
		    </td>
		    <td>
			 capacity for the storage volume
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags for the storage volume resize for virStorageVolResize()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_download"><code>libvirt_storagevolume_download</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_download($res, $stream, $offset, $length, $flags)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to download volume identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@stream [resource]</tt></i>:</span>
		    </td>
		    <td>
			 stream to use as output
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@offset [int]</tt></i>:</span>
		    </td>
		    <td>
			 position to start reading from
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@length [int] </tt></i>:</span>
		    </td>
		    <td>
			 limit on amount of data to download
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags for the storage volume download for virStorageVolDownload()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagevolume_upload"><code>libvirt_storagevolume_upload</code></a></h3>
<pre class="programlisting">libvirt_storagevolume_upload($res, $stream, $offset, $length, $flags)</pre>
<p>[Since version 0.5.0]</p>
<p>Function is used to upload volume identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagevolume resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@stream [resource]</tt></i>:</span>
		    </td>
		    <td>
			 stream to use as input
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@offset [int]</tt></i>:</span>
		    </td>
		    <td>
			 position to start writing to
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@length [int] </tt></i>:</span>
		    </td>
		    <td>
			 limit on amount of data to upload
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags for the storage volume upload for virStorageVolUpload()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         int
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_uuid_string"><code>libvirt_storagepool_get_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_uuid_string($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get storage pool by UUID string.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagepool UUID string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_name"><code>libvirt_storagepool_get_name</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_name($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get storage pool name from the storage pool resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagepool name string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_lookup_by_uuid_string"><code>libvirt_storagepool_lookup_by_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_storagepool_lookup_by_uuid_string($res, $uuid)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to lookup for storage pool identified by UUID string.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uuid [string]</tt></i>:</span>
		    </td>
		    <td>
			 UUID string to look for storagepool
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_xml_desc"><code>libvirt_storagepool_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_xml_desc($res, $xpath)</pre>
<p>[Since version 0.4.1(-1), changed 0.4.2]</p>
<p>Function is used to get the XML description for the storage pool identified by res.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         storagepool XML description string or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_define_xml"><code>libvirt_storagepool_define_xml</code></a></h3>
<pre class="programlisting">libvirt_storagepool_define_xml($res, $xml, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to define the storage pool from XML string and return it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string definition of storagepool
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags to define XML
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_undefine"><code>libvirt_storagepool_undefine</code></a></h3>
<pre class="programlisting">libvirt_storagepool_undefine($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to undefine the storage pool identified by it's resource.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_create"><code>libvirt_storagepool_create</code></a></h3>
<pre class="programlisting">libvirt_storagepool_create($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to create/start the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_destroy"><code>libvirt_storagepool_destroy</code></a></h3>
<pre class="programlisting">libvirt_storagepool_destroy($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to destory the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_is_active"><code>libvirt_storagepool_is_active</code></a></h3>
<pre class="programlisting">libvirt_storagepool_is_active($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get information whether storage pool is active or not.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result of virStoragePoolIsActive
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_volume_count"><code>libvirt_storagepool_get_volume_count</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_volume_count($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get storage volume count in the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:             number of volumes in the pool
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_refresh"><code>libvirt_storagepool_refresh</code></a></h3>
<pre class="programlisting">libvirt_storagepool_refresh($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to refresh the storage pool information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 refresh flags
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_set_autostart"><code>libvirt_storagepool_set_autostart</code></a></h3>
<pre class="programlisting">libvirt_storagepool_set_autostart($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to set autostart of the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags to set autostart
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         result on setting storagepool autostart value
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_get_autostart"><code>libvirt_storagepool_get_autostart</code></a></h3>
<pre class="programlisting">libvirt_storagepool_get_autostart($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get autostart of the storage pool.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for autostart enabled, FALSE for autostart disabled, FALSE with last_error set for error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_build"><code>libvirt_storagepool_build</code></a></h3>
<pre class="programlisting">libvirt_storagepool_build($res)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to Build the underlying storage pool, e.g. create the destination directory for NFS.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_storagepool_delete"><code>libvirt_storagepool_delete</code></a></h3>
<pre class="programlisting">libvirt_storagepool_delete($res)</pre>
<p>[Since version 0.4.6]</p>
<p>Function is used to Delete the underlying storage pool, e.g. remove the destination directory for NFS.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt storagepool resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_storagepools"><code>libvirt_list_storagepools</code></a></h3>
<pre class="programlisting">libvirt_list_storagepools($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list storage pools on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_active_storagepools"><code>libvirt_list_active_storagepools</code></a></h3>
<pre class="programlisting">libvirt_list_active_storagepools($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list active storage pools on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_inactive_storagepools"><code>libvirt_list_inactive_storagepools</code></a></h3>
<pre class="programlisting">libvirt_list_inactive_storagepools($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list inactive storage pools on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt storagepool names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_domains"><code>libvirt_list_domains</code></a></h3>
<pre class="programlisting">libvirt_list_domains($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list domains on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_domain_resources"><code>libvirt_list_domain_resources</code></a></h3>
<pre class="programlisting">libvirt_list_domain_resources($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list domain resources on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt domain resources array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_active_domain_ids"><code>libvirt_list_active_domain_ids</code></a></h3>
<pre class="programlisting">libvirt_list_active_domain_ids($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list active domain IDs on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt active domain ids array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_active_domains"><code>libvirt_list_active_domains</code></a></h3>
<pre class="programlisting">libvirt_list_active_domains($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list active domain names on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt active domain names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_inactive_domains"><code>libvirt_list_inactive_domains</code></a></h3>
<pre class="programlisting">libvirt_list_inactive_domains($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list inactive domain names on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt inactive domain names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_all_networks"><code>libvirt_list_all_networks</code></a></h3>
<pre class="programlisting">libvirt_list_all_networks($res, $flags)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to list networks on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 optional flags to filter the results for a smaller list of targetted networks (bitwise-OR VIR_CONNECT_LIST_NETWORKS_* constants)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt network resources array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_networks"><code>libvirt_list_networks</code></a></h3>
<pre class="programlisting">libvirt_list_networks($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list networks on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flags whether to list active, inactive or all networks (VIR_NETWORKS_{ACTIVE|INACTIVE|ALL} constants)
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt network names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_nodedevs"><code>libvirt_list_nodedevs</code></a></h3>
<pre class="programlisting">libvirt_list_nodedevs($res, $cap)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list node devices on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@cap [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional capability string
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nodedev names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_all_nwfilters"><code>libvirt_list_all_nwfilters</code></a></h3>
<pre class="programlisting">libvirt_list_all_nwfilters($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to list nwfilters on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter resources array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_list_nwfilters"><code>libvirt_list_nwfilters</code></a></h3>
<pre class="programlisting">libvirt_list_nwfilters($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to list nwfilters on the connection.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter names array for the connection
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nodedev_get"><code>libvirt_nodedev_get</code></a></h3>
<pre class="programlisting">libvirt_nodedev_get($res, $name)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the node device by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the nodedev to get resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nodedev resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nodedev_capabilities"><code>libvirt_nodedev_capabilities</code></a></h3>
<pre class="programlisting">libvirt_nodedev_capabilities($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to list node devices by capabilities.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nodedev resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nodedev capabilities array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nodedev_get_xml_desc"><code>libvirt_nodedev_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_nodedev_get_xml_desc($res, $xpath)</pre>
<p>[Since version 0.4.1(-1), changed 0.4.2]</p>
<p>Function is used to get the node device's XML description.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nodedev resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nodedev XML description string or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nodedev_get_information"><code>libvirt_nodedev_get_information</code></a></h3>
<pre class="programlisting">libvirt_nodedev_get_information($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the node device's information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nodedev resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nodedev information array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_define_xml"><code>libvirt_network_define_xml</code></a></h3>
<pre class="programlisting">libvirt_network_define_xml($res, $xml)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to define a new virtual network based on the XML description.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string definition of network to be defined
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt network resource of newly defined network
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_undefine"><code>libvirt_network_undefine</code></a></h3>
<pre class="programlisting">libvirt_network_undefine($res)</pre>
<p>[Since version 0.4.2]</p>
<p>Function is used to undefine already defined network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get"><code>libvirt_network_get</code></a></h3>
<pre class="programlisting">libvirt_network_get($res, $name)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the network resource from name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 network name string
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt network resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_bridge"><code>libvirt_network_get_bridge</code></a></h3>
<pre class="programlisting">libvirt_network_get_bridge($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the bridge associated with the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         bridge name string
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_active"><code>libvirt_network_get_active</code></a></h3>
<pre class="programlisting">libvirt_network_get_active($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the activity state of the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         1 when active, 0 when inactive, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_information"><code>libvirt_network_get_information</code></a></h3>
<pre class="programlisting">libvirt_network_get_information($res)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the network information.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         network information array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_set_active"><code>libvirt_network_set_active</code></a></h3>
<pre class="programlisting">libvirt_network_set_active($res, $flags)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to set the activity state of the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 active
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_xml_desc"><code>libvirt_network_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_network_get_xml_desc($res, $xpath)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get the XML description for the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         network XML string or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_uuid_string"><code>libvirt_network_get_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_network_get_uuid_string($res)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to get network's UUID in string format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         network UUID string or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_uuid"><code>libvirt_network_get_uuid</code></a></h3>
<pre class="programlisting">libvirt_network_get_uuid($res)</pre>
<p>[Since version 0.5.3]</p>
<p>(null).</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt netowrk resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         network UUID in binary format or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_name"><code>libvirt_network_get_name</code></a></h3>
<pre class="programlisting">libvirt_network_get_name($res)</pre>
<p>[Since version 0.5.3]</p>
<p>Function is used to get network's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         network name string or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_get_autostart"><code>libvirt_network_get_autostart</code></a></h3>
<pre class="programlisting">libvirt_network_get_autostart($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is getting the autostart value for the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         autostart value or -1 on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_network_set_autostart"><code>libvirt_network_set_autostart</code></a></h3>
<pre class="programlisting">libvirt_network_set_autostart($res, $flags)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is setting the autostart value for the network.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt network resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@flags [int]</tt></i>:</span>
		    </td>
		    <td>
			 flag to enable/disable autostart
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE on success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_define_xml"><code>libvirt_nwfilter_define_xml</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_define_xml($res, $xml)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to define a new nwfilter based on the XML description.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xml [string]</tt></i>:</span>
		    </td>
		    <td>
			 XML string definition of nwfilter to be defined
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter resource of newly defined nwfilter
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_undefine"><code>libvirt_nwfilter_undefine</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_undefine($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to undefine already defined nwfilter.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nwfilter resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE for success, FALSE on error
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_get_xml_desc"><code>libvirt_nwfilter_get_xml_desc</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_get_xml_desc($res, $xpath)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to get the XML description for the nwfilter.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nwfilter resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@xpath [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional xPath expression string to get just this entry, can be NULL
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nwfilter XML string or result of xPath expression
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_get_uuid_string"><code>libvirt_nwfilter_get_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_get_uuid_string($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to get nwfilter's UUID in string format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nwfilter resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nwfilter UUID string or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_get_uuid"><code>libvirt_nwfilter_get_uuid</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_get_uuid($res)</pre>
<p>[Since version 0.5.3]</p>
<p>(null).</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt netowrk resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nwfilter UUID in binary format or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_get_name"><code>libvirt_nwfilter_get_name</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_get_name($res)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to get nwfilter's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt nwfilter resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         nwfilter name string or FALSE on failure
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_lookup_by_name"><code>libvirt_nwfilter_lookup_by_name</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_lookup_by_name($res, $name)</pre>
<p>[Since version 0.5.4]</p>
<p>This functions is used to lookup for the nwfilter by it's name.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 name of the nwfilter to get the resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_lookup_by_uuid_string"><code>libvirt_nwfilter_lookup_by_uuid_string</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_lookup_by_uuid_string($res, $uuid)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to lookup for nwfilter identified by UUID string.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uuid [string]</tt></i>:</span>
		    </td>
		    <td>
			 UUID string to look for nwfilter
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_nwfilter_lookup_by_uuid"><code>libvirt_nwfilter_lookup_by_uuid</code></a></h3>
<pre class="programlisting">libvirt_nwfilter_lookup_by_uuid($res, $uuid)</pre>
<p>[Since version 0.5.4]</p>
<p>Function is used to lookup for nwfilter by it's UUID in the binary format.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@res [resource]</tt></i>:</span>
		    </td>
		    <td>
			 libvirt connection resource from libvirt_connect()
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@uuid [string]</tt></i>:</span>
		    </td>
		    <td>
			 binary defined UUID to look for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt nwfilter resource
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_version"><code>libvirt_version</code></a></h3>
<pre class="programlisting">libvirt_version($type)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to get libvirt, driver and libvirt-php version numbers. Can be used for information purposes, for version checking please use libvirt_check_version() defined below.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@type [string]</tt></i>:</span>
		    </td>
		    <td>
			 optional type string to identify driver to look at
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         libvirt, type (driver) and connector (libvirt-php) version numbers array
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_check_version"><code>libvirt_check_version</code></a></h3>
<pre class="programlisting">libvirt_check_version($major, $minor, $micro, $type)</pre>
<p>[Since version 0.4.1(-1)]</p>
<p>Function is used to check major, minor and micro (also sometimes called release) versions of libvirt-php or libvirt itself. This could useful when you want your application to support only versions of libvirt or libvirt-php higher than some version specified..</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@major [long]</tt></i>:</span>
		    </td>
		    <td>
			 major version number to check for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@minor [long]</tt></i>:</span>
		    </td>
		    <td>
			 minor version number to check for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@micro [long]</tt></i>:</span>
		    </td>
		    <td>
			 micro (also release) version number to check for
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@type [long]</tt></i>:</span>
		    </td>
		    <td>
			 type of checking, VIR_VERSION_BINDING to check against libvirt-php binding or VIR_VERSION_LIBVIRT to check against libvirt version
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:         TRUE if version is equal or higher than required, FALSE if not, FALSE with error [for libvirt_get_last_error()] on unsupported version type check
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_has_feature"><code>libvirt_has_feature</code></a></h3>
<pre class="programlisting">libvirt_has_feature($name)</pre>
<p>[Since version 0.4.1(-3)]</p>
<p>Function to check for feature existence for working libvirt instance.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@name [string]</tt></i>:</span>
		    </td>
		    <td>
			 feature name
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:             TRUE if feature is supported, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_get_iso_images"><code>libvirt_get_iso_images</code></a></h3>
<pre class="programlisting">libvirt_get_iso_images($path)</pre>
<p>[Since version 0.4.1(-3)]</p>
<p>Function to get the ISO images on path and return them in the array.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@path [string]</tt></i>:</span>
		    </td>
		    <td>
			 string of path where to look for the ISO images
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:             ISO image array on success, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_print_binding_resources"><code>libvirt_print_binding_resources</code></a></h3>
<pre class="programlisting">libvirt_print_binding_resources()</pre>
<p>[Since version 0.4.2]</p>
<p>Function to print the binding resources, although the resource information are printed, they are returned in the return_value.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:             bindings resource information
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
<h3><a name="libvirt_logfile_set"><code>libvirt_logfile_set</code></a></h3>
<pre class="programlisting">libvirt_logfile_set($filename, $maxsize)</pre>
<p>[Since version 0.4.2]</p>
<p>Function to set the log file for the libvirt module instance.</p><div class="variablelist">
	<table border="0">
		<col align="left" />
		<tbody>
		  <tr>
		    <td>
			<span class="term"><i><tt>@filename [string]</tt></i>:</span>
		    </td>
		    <td>
			 log filename or NULL to disable logging
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>@maxsize [long]</tt></i>:</span>
		    </td>
		    <td>
			 optional maximum log file size argument in KiB, default value can be found in PHPInfo() output
		    </td>
		  </tr>
		  <tr>
		    <td>
			<span class="term"><i><tt>Returns</tt></i>:</span>
		    </td>
		    <td>
			:             TRUE if log file has been successfully set, FALSE otherwise
		    </td>
		  </tr>
		</tbody>
	</table>
</div>
